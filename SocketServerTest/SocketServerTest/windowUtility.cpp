#include "windowUtility.h"

namespace frame
{
	const char * WindowUtility::convertToText(unsigned int message)
	{
		if (message == 0x0000) return "WM_NULL";
		else if (message == 0x0000) return "WM_NULL";
		else if (message == 0x0001) return "WM_CREATE";
		else if (message == 0x0002) return "WM_DESTROY";
		else if (message == 0x0003) return "WM_MOVE";
		else if (message == 0x0005) return "WM_SIZE";
		else if (message == 0x0006) return "WM_ACTIVATE";
		else if (message == 0x0007) return "WM_SETFOCUS";
		else if (message == 0x0008) return "WM_KILLFOCUS";
		else if (message == 0x000A) return "WM_ENABLE";
		else if (message == 0x000B) return "WM_SETREDRAW";
		else if (message == 0x000C) return "WM_SETTEXT";
		else if (message == 0x000D) return "WM_GETTEXT";
		else if (message == 0x000E) return "WM_GETTEXTLENGTH";
		else if (message == 0x000F) return "WM_PAINT";
		else if (message == 0x0010) return "WM_CLOSE";
		else if (message == 0x0011) return "WM_QUERYENDSESSION";
		else if (message == 0x0013) return "WM_QUERYOPEN";
		else if (message == 0x0016) return "WM_ENDSESSION";
		else if (message == 0x0012) return "WM_QUIT";
		else if (message == 0x0014) return "WM_ERASEBKGND";
		else if (message == 0x0015) return "WM_SYSCOLORCHANGE";
		else if (message == 0x0018) return "WM_SHOWWINDOW";
		else if (message == 0x001A) return "WM_WININICHANGE";
		else if (message == 0x001B) return "WM_DEVMODECHANGE";
		else if (message == 0x001C) return "WM_ACTIVATEAPP";
		else if (message == 0x001D) return "WM_FONTCHANGE";
		else if (message == 0x001E) return "WM_TIMECHANGE";
		else if (message == 0x001F) return "WM_CANCELMODE";
		else if (message == 0x0020) return "WM_SETCURSOR";
		else if (message == 0x0021) return "WM_MOUSEACTIVATE";
		else if (message == 0x0022) return "WM_CHILDACTIVATE";
		else if (message == 0x0023) return "WM_QUEUESYNC";
		else if (message == 0x0024) return "WM_GETMINMAXINFO";
		else if (message == 0x0026) return "WM_PAINTICON";
		else if (message == 0x0027) return "WM_ICONERASEBKGND";
		else if (message == 0x0028) return "WM_NEXTDLGCTL";
		else if (message == 0x002A) return "WM_SPOOLERSTATUS";
		else if (message == 0x002B) return "WM_DRAWITEM";
		else if (message == 0x002C) return "WM_MEASUREITEM";
		else if (message == 0x002D) return "WM_DELETEITEM";
		else if (message == 0x002E) return "WM_VKEYTOITEM";
		else if (message == 0x002F) return "WM_CHARTOITEM";
		else if (message == 0x0030) return "WM_SETFONT";
		else if (message == 0x0031) return "WM_GETFONT";
		else if (message == 0x0032) return "WM_SETHOTKEY";
		else if (message == 0x0033) return "WM_GETHOTKEY";
		else if (message == 0x0037) return "WM_QUERYDRAGICON";
		else if (message == 0x0039) return "WM_COMPAREITEM";
		else if (message == 0x003D) return "WM_GETOBJECT";
		if (message == 0x0041) return "WM_COMPACTING"; // C1061 ëŒçÙ
		else if (message == 0x0044) return "WM_COMMNOTIFY";
		else if (message == 0x0046) return "WM_WINDOWPOSCHANGING";
		else if (message == 0x0047) return "WM_WINDOWPOSCHANGED";
		else if (message == 0x0048) return "WM_POWER";
		else if (message == 0x004A) return "WM_COPYDATA";
		else if (message == 0x004B) return "WM_CANCELJOURNAL";
		else if (message == 0x004E) return "WM_NOTIFY";
		else if (message == 0x0050) return "WM_INPUTLANGCHANGEREQUEST";
		else if (message == 0x0051) return "WM_INPUTLANGCHANGE";
		else if (message == 0x0052) return "WM_TCARD";
		else if (message == 0x0053) return "WM_HELP";
		else if (message == 0x0054) return "WM_USERCHANGED";
		else if (message == 0x0055) return "WM_NOTIFYFORMAT";
		else if (message == 0x007B) return "WM_CONTEXTMENU";
		else if (message == 0x007C) return "WM_STYLECHANGING";
		else if (message == 0x007D) return "WM_STYLECHANGED";
		else if (message == 0x007E) return "WM_DISPLAYCHANGE";
		else if (message == 0x007F) return "WM_GETICON";
		else if (message == 0x0080) return "WM_SETICON";
		else if (message == 0x0081) return "WM_NCCREATE";
		else if (message == 0x0082) return "WM_NCDESTROY";
		else if (message == 0x0083) return "WM_NCCALCSIZE";
		else if (message == 0x0084) return "WM_NCHITTEST";
		else if (message == 0x0085) return "WM_NCPAINT";
		else if (message == 0x0086) return "WM_NCACTIVATE";
		else if (message == 0x0087) return "WM_GETDLGCODE";
		else if (message == 0x0088) return "WM_SYNCPAINT";
		else if (message == 0x00A0) return "WM_NCMOUSEMOVE";
		else if (message == 0x00A1) return "WM_NCLBUTTONDOWN";
		else if (message == 0x00A2) return "WM_NCLBUTTONUP";
		else if (message == 0x00A3) return "WM_NCLBUTTONDBLCLK";
		else if (message == 0x00A4) return "WM_NCRBUTTONDOWN";
		else if (message == 0x00A5) return "WM_NCRBUTTONUP";
		else if (message == 0x00A6) return "WM_NCRBUTTONDBLCLK";
		else if (message == 0x00A7) return "WM_NCMBUTTONDOWN";
		else if (message == 0x00A8) return "WM_NCMBUTTONUP";
		else if (message == 0x00A9) return "WM_NCMBUTTONDBLCLK";
		else if (message == 0x00AB) return "WM_NCXBUTTONDOWN";
		else if (message == 0x00AC) return "WM_NCXBUTTONUP";
		else if (message == 0x00AD) return "WM_NCXBUTTONDBLCLK";
		else if (message == 0x00FE) return "WM_INPUT_DEVICE_CHANGE";
		else if (message == 0x00FF) return "WM_INPUT";
		else if (message == 0x0100) return "WM_KEYFIRST";
		else if (message == 0x0100) return "WM_KEYDOWN";
		else if (message == 0x0101) return "WM_KEYUP";
		else if (message == 0x0102) return "WM_CHAR";
		else if (message == 0x0103) return "WM_DEADCHAR";
		else if (message == 0x0104) return "WM_SYSKEYDOWN";
		else if (message == 0x0105) return "WM_SYSKEYUP";
		if (message == 0x0106) return "WM_SYSCHAR";
		else if (message == 0x0107) return "WM_SYSDEADCHAR";
		else if (message == 0x0109) return "WM_UNICHAR";
		else if (message == 0x0109) return "WM_KEYLAST";
		else if (message == 0x0108) return "WM_KEYLAST";
		else if (message == 0x010D) return "WM_IME_STARTCOMPOSITION";
		else if (message == 0x010E) return "WM_IME_ENDCOMPOSITION";
		else if (message == 0x010F) return "WM_IME_COMPOSITION";
		else if (message == 0x010F) return "WM_IME_KEYLAST";
		else if (message == 0x0110) return "WM_INITDIALOG";
		else if (message == 0x0111) return "WM_COMMAND";
		else if (message == 0x0112) return "WM_SYSCOMMAND";
		else if (message == 0x0113) return "WM_TIMER";
		else if (message == 0x0114) return "WM_HSCROLL";
		else if (message == 0x0115) return "WM_VSCROLL";
		else if (message == 0x0116) return "WM_INITMENU";
		else if (message == 0x0117) return "WM_INITMENUPOPUP";
		else if (message == 0x0119) return "WM_GESTURE";
		else if (message == 0x011A) return "WM_GESTURENOTIFY";
		else if (message == 0x011F) return "WM_MENUSELECT";
		else if (message == 0x0120) return "WM_MENUCHAR";
		else if (message == 0x0121) return "WM_ENTERIDLE";
		else if (message == 0x0122) return "WM_MENURBUTTONUP";
		else if (message == 0x0123) return "WM_MENUDRAG";
		else if (message == 0x0124) return "WM_MENUGETOBJECT";
		else if (message == 0x0125) return "WM_UNINITMENUPOPUP";
		else if (message == 0x0126) return "WM_MENUCOMMAND";
		else if (message == 0x0127) return "WM_CHANGEUISTATE";
		else if (message == 0x0128) return "WM_UPDATEUISTATE";
		else if (message == 0x0129) return "WM_QUERYUISTATE";
		else if (message == 0x0132) return "WM_CTLCOLORMSGBOX";
		else if (message == 0x0133) return "WM_CTLCOLOREDIT";
		else if (message == 0x0134) return "WM_CTLCOLORLISTBOX";
		else if (message == 0x0135) return "WM_CTLCOLORBTN";
		else if (message == 0x0136) return "WM_CTLCOLORDLG";
		else if (message == 0x0137) return "WM_CTLCOLORSCROLLBAR";
		else if (message == 0x0138) return "WM_CTLCOLORSTATIC";
		else if (message == 0x01E1) return "MN_GETHMENU";
		else if (message == 0x0200) return "WM_MOUSEFIRST";
		else if (message == 0x0200) return "WM_MOUSEMOVE";
		else if (message == 0x0201) return "WM_LBUTTONDOWN";
		else if (message == 0x0202) return "WM_LBUTTONUP";
		else if (message == 0x0203) return "WM_LBUTTONDBLCLK";
		else if (message == 0x0204) return "WM_RBUTTONDOWN";
		else if (message == 0x0205) return "WM_RBUTTONUP";
		else if (message == 0x0206) return "WM_RBUTTONDBLCLK";
		else if (message == 0x0207) return "WM_MBUTTONDOWN";
		else if (message == 0x0208) return "WM_MBUTTONUP";
		else if (message == 0x0209) return "WM_MBUTTONDBLCLK";
		else if (message == 0x020A) return "WM_MOUSEWHEEL";
		if (message == 0x020B) return "WM_XBUTTONDOWN";
		else if (message == 0x020C) return "WM_XBUTTONUP";
		else if (message == 0x020D) return "WM_XBUTTONDBLCLK";
		else if (message == 0x020E) return "WM_MOUSEHWHEEL";
		else if (message == 0x020E) return "WM_MOUSELAST";
		else if (message == 0x020D) return "WM_MOUSELAST";
		else if (message == 0x020A) return "WM_MOUSELAST";
		else if (message == 0x0209) return "WM_MOUSELAST";
		else if (message == 0x0210) return "WM_PARENTNOTIFY";
		else if (message == 0x0211) return "WM_ENTERMENULOOP";
		else if (message == 0x0212) return "WM_EXITMENULOOP";
		else if (message == 0x0213) return "WM_NEXTMENU";
		else if (message == 0x0214) return "WM_SIZING";
		else if (message == 0x0215) return "WM_CAPTURECHANGED";
		else if (message == 0x0216) return "WM_MOVING";
		else if (message == 0x0218) return "WM_POWERBROADCAST";
		else if (message == 0x0219) return "WM_DEVICECHANGE";
		else if (message == 0x0220) return "WM_MDICREATE";
		else if (message == 0x0221) return "WM_MDIDESTROY";
		else if (message == 0x0222) return "WM_MDIACTIVATE";
		else if (message == 0x0223) return "WM_MDIRESTORE";
		else if (message == 0x0224) return "WM_MDINEXT";
		else if (message == 0x0225) return "WM_MDIMAXIMIZE";
		else if (message == 0x0226) return "WM_MDITILE";
		else if (message == 0x0227) return "WM_MDICASCADE";
		else if (message == 0x0228) return "WM_MDIICONARRANGE";
		else if (message == 0x0229) return "WM_MDIGETACTIVE";
		else if (message == 0x0230) return "WM_MDISETMENU";
		else if (message == 0x0231) return "WM_ENTERSIZEMOVE";
		else if (message == 0x0232) return "WM_EXITSIZEMOVE";
		else if (message == 0x0233) return "WM_DROPFILES";
		else if (message == 0x0234) return "WM_MDIREFRESHMENU";
		else if (message == 0x0238) return "WM_POINTERDEVICECHANGE";
		else if (message == 0x0239) return "WM_POINTERDEVICEINRANGE";
		else if (message == 0x023A) return "WM_POINTERDEVICEOUTOFRANGE";
		else if (message == 0x0240) return "WM_TOUCH";
		else if (message == 0x0241) return "WM_NCPOINTERUPDATE";
		else if (message == 0x0242) return "WM_NCPOINTERDOWN";
		else if (message == 0x0243) return "WM_NCPOINTERUP";
		else if (message == 0x0245) return "WM_POINTERUPDATE";
		else if (message == 0x0246) return "WM_POINTERDOWN";
		else if (message == 0x0247) return "WM_POINTERUP";
		else if (message == 0x0249) return "WM_POINTERENTER";
		else if (message == 0x024A) return "WM_POINTERLEAVE";
		else if (message == 0x024B) return "WM_POINTERACTIVATE";
		else if (message == 0x024C) return "WM_POINTERCAPTURECHANGED";
		else if (message == 0x024D) return "WM_TOUCHHITTESTING";
		else if (message == 0x024E) return "WM_POINTERWHEEL";
		else if (message == 0x024F) return "WM_POINTERHWHEEL";
		else if (message == 0x0250) return "DM_POINTERHITTEST";
		if (message == 0x0251) return "WM_POINTERROUTEDTO";
		else if (message == 0x0252) return "WM_POINTERROUTEDAWAY";
		else if (message == 0x0253) return "WM_POINTERROUTEDRELEASED";
		else if (message == 0x0281) return "WM_IME_SETCONTEXT";
		else if (message == 0x0282) return "WM_IME_NOTIFY";
		else if (message == 0x0283) return "WM_IME_CONTROL";
		else if (message == 0x0284) return "WM_IME_COMPOSITIONFULL";
		else if (message == 0x0285) return "WM_IME_SELECT";
		else if (message == 0x0286) return "WM_IME_CHAR";
		else if (message == 0x0288) return "WM_IME_REQUEST";
		else if (message == 0x0290) return "WM_IME_KEYDOWN";
		else if (message == 0x0291) return "WM_IME_KEYUP";
		else if (message == 0x02A1) return "WM_MOUSEHOVER";
		else if (message == 0x02A3) return "WM_MOUSELEAVE";
		else if (message == 0x02A0) return "WM_NCMOUSEHOVER";
		else if (message == 0x02A2) return "WM_NCMOUSELEAVE";
		else if (message == 0x02B1) return "WM_WTSSESSION_CHANGE";
		else if (message == 0x02c0) return "WM_TABLET_FIRST";
		else if (message == 0x02df) return "WM_TABLET_LAST";
		else if (message == 0x02E0) return "WM_DPICHANGED";
		else if (message == 0x02E2) return "WM_DPICHANGED_BEFOREPARENT";
		else if (message == 0x02E3) return "WM_DPICHANGED_AFTERPARENT";
		else if (message == 0x02E4) return "WM_GETDPISCALEDSIZE";
		else if (message == 0x0300) return "WM_CUT";
		else if (message == 0x0301) return "WM_COPY";
		else if (message == 0x0302) return "WM_PASTE";
		else if (message == 0x0303) return "WM_CLEAR";
		else if (message == 0x0304) return "WM_UNDO";
		else if (message == 0x0305) return "WM_RENDERFORMAT";
		else if (message == 0x0306) return "WM_RENDERALLFORMATS";
		else if (message == 0x0307) return "WM_DESTROYCLIPBOARD";
		else if (message == 0x0308) return "WM_DRAWCLIPBOARD";
		else if (message == 0x0309) return "WM_PAINTCLIPBOARD";
		else if (message == 0x030A) return "WM_VSCROLLCLIPBOARD";
		else if (message == 0x030B) return "WM_SIZECLIPBOARD";
		else if (message == 0x030C) return "WM_ASKCBFORMATNAME";
		else if (message == 0x030D) return "WM_CHANGECBCHAIN";
		else if (message == 0x030E) return "WM_HSCROLLCLIPBOARD";
		else if (message == 0x030F) return "WM_QUERYNEWPALETTE";
		else if (message == 0x0310) return "WM_PALETTEISCHANGING";
		else if (message == 0x0311) return "WM_PALETTECHANGED";
		else if (message == 0x0312) return "WM_HOTKEY";
		else if (message == 0x0317) return "WM_PRINT";
		else if (message == 0x0318) return "WM_PRINTCLIENT";
		else if (message == 0x0319) return "WM_APPCOMMAND";
		else if (message == 0x031A) return "WM_THEMECHANGED";
		else if (message == 0x031D) return "WM_CLIPBOARDUPDATE";
		else if (message == 0x031E) return "WM_DWMCOMPOSITIONCHANGED";
		else if (message == 0x031F) return "WM_DWMNCRENDERINGCHANGED";
		else if (message == 0x0320) return "WM_DWMCOLORIZATIONCOLORCHANGED";
		if (message == 0x0321) return "WM_DWMWINDOWMAXIMIZEDCHANGE";
		else if (message == 0x0323) return "WM_DWMSENDICONICTHUMBNAIL";
		else if (message == 0x0326) return "WM_DWMSENDICONICLIVEPREVIEWBITMAP";
		else if (message == 0x033F) return "WM_GETTITLEBARINFOEX";
		else if (message == 0x0358) return "WM_HANDHELDFIRST";
		else if (message == 0x035F) return "WM_HANDHELDLAST";
		else if (message == 0x0360) return "WM_AFXFIRST";
		else if (message == 0x037F) return "WM_AFXLAST";
		else if (message == 0x0380) return "WM_PENWINFIRST";
		else if (message == 0x038F) return "WM_PENWINLAST";
		else if (message == 0x8000) return "WM_APP";
		else if (message == 0x0400) return "WM_USER";

		return "";
	}

	void WindowUtility::showErrorMessage(HWND windowHandle, LPCSTR text, LPCSTR caption)
	{
		::MessageBoxA(windowHandle, text, caption, MB_OK | MB_APPLMODAL | MB_ICONSTOP);
	}
}
